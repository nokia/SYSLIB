/*
 *   @file  testVectors.h
 *
 *   @brief   
 *      Test Vectors  
 *
 *  \par
 *  NOTE:
 *      (C) Copyright 2012 Texas Instruments, Inc.
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __TEST_VECTORS_H__
#define __TEST_VECTORS_H__

/* These definitions control the number of test vectors which are present. */
#define DOWNLINK_TEST_SETS          7
#define UPLINK_TEST_SETS            4

/** 
 * @brief 
 *  Downlink Test Vector
 *
 * @details
 *  The structure defines the downlink test vector which are used to verify
 *  the functionality.
 */
typedef struct DLTestVector
{
    uint8_t                 encryptionKey[16];
    uint8_t                 integrityKey[16];
    Netfp_3gppAuthMode      authMode;
    Netfp_3gppCipherMode    cipherMode;
	uint32_t                count;
	uint32_t                bearerId;
	uint32_t                length;
	uint8_t                 plainMessage[2060];
	uint8_t                 outputMessage[2060];
}DLTestVector;

/** 
 * @brief Downlink Test Vectors 
 */
DLTestVector downLinkTestVectors[] =
{
    /* TEST Vector 1: 
     *  - NULL Authentication 
     *  - NULL Ciphering        */
    { 
        /* Encryption Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        /* Ciphering Key */
        {
            0x0A,0x8B,0x6B,0xD8,0xD9,0xB0,0x8B,0x08,0xD6,0x4E,0x32,0xD1,0x81,0x77,0x77,0xFB 
        },
        Netfp_3gppAuthMode_EIA0,
        Netfp_3gppCipherMode_EEA0,
        /* Count */
        0x398A59B4,
        /* Bearer */
        0x1,
        /* Length in bytes */
		32,
        /* Input Message. */
        {
            0x98,0x1B,0xA6,0x82,0x4C,0x1B,0xFB,0x1A,0xB4,0x85,0x47,0x20,0x29,0xB7,0x1D,0x80,
		    0x8C,0xE3,0x3E,0x2C,0xC3,0xC0,0xB5,0xFC,0x1F,0x3D,0xE8,0xA6,0xDC,0x66,0xB1,0xF0
        },
        /* Ciphered Data. */
        {
            0x98,0x1B,0xA6,0x82,0x4C,0x1B,0xFB,0x1A,0xB4,0x85,0x47,0x20,0x29,0xB7,0x1D,0x80,
            0x8C,0xE3,0x3E,0x2C,0xC3,0xC0,0xB5,0xFC,0x1F,0x3D,0xE8,0xA6,0xDC,0x66,0xB1,0xF0
        },
    },

    /* TEST Vector 2: 
     *  - SNOW3G Authentication 
     *  - SNOW3G Ciphering        */
    { 
        /* Encryption Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        /* Ciphering Key */
        {
            0x0A,0x8B,0x6B,0xD8,0xD9,0xB0,0x8B,0x08,0xD6,0x4E,0x32,0xD1,0x81,0x77,0x77,0xFB 
        },
        Netfp_3gppAuthMode_EIA1,
        Netfp_3gppCipherMode_EEA1,
        /* Count */
        0x398A59B4,
        /* Bearer */
        0x1,
        /* Length in bytes */
		32,
        /* Input Message. */
        {
            0x98,0x1B,0xA6,0x82,0x4C,0x1B,0xFB,0x1A,0xB4,0x85,0x47,0x20,0x29,0xB7,0x1D,0x80,
		    0x8C,0xE3,0x3E,0x2C,0xC3,0xC0,0xB5,0xFC,0x1F,0x3D,0xE8,0xA6,0xDC,0x66,0xB1,0xF0
        },
        /* Ciphered Data. */
        {
            0x98,0x94,0x65,0x42,0x36,0xE2,0x56,0xE6,0x90,0xA9,0xCE,0x8B,0x4C,0x44,0x7B,0xD8,
            0xD6,0x8B,0x76,0x3D,0xD8,0x0F,0x01,0xFA,0x9A,0x56,0x84,0x7E,0x1F,0x43,0x5C,0xF9,
            0x8A,0x7B,0xD8,0xC3
        }
    },
    /* TEST Vector 3: 
     *  - SNOW3G Authentication 
     *  - NULL   Ciphering        */
    { 
        /* Encryption Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        /* Ciphering Key */
        {
            0x0A,0x8B,0x6B,0xD8,0xD9,0xB0,0x8B,0x08,0xD6,0x4E,0x32,0xD1,0x81,0x77,0x77,0xFB 
        },
        Netfp_3gppAuthMode_EIA1,
        Netfp_3gppCipherMode_EEA0,
        /* Count */
        0x398A59B4,
        /* Bearer */
        0x1,
        /* Length in bytes */
		32,
        /* Input Message. */
        {
            0x98,0x1B,0xA6,0x82,0x4C,0x1B,0xFB,0x1A,0xB4,0x85,0x47,0x20,0x29,0xB7,0x1D,0x80,
		    0x8C,0xE3,0x3E,0x2C,0xC3,0xC0,0xB5,0xFC,0x1F,0x3D,0xE8,0xA6,0xDC,0x66,0xB1,0xF0
        },
        /* Ciphered Data. */
        {
            0x98,0x1B,0xA6,0x82, 0x4C,0x1B,0xFB,0x1A, 0xB4,0x85,0x47,0x20, 0x29,0xB7,0x1D,0x80,
            0x8C,0xE3,0x3E,0x2C, 0xC3,0xC0,0xB5,0xFC, 0x1F,0x3D,0xE8,0xA6, 0xDC,0x66,0xB1,0xF0,
            0xBF,0x7F,0xBD,0x44
        }
    },
    /* TEST Vector 4: 
     *  - AES    Authentication 
     *  - NULL   Ciphering        */
    { 
        /* Encryption Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        /* Ciphering Key */
        {
            0x0A,0x8B,0x6B,0xD8,0xD9,0xB0,0x8B,0x08,0xD6,0x4E,0x32,0xD1,0x81,0x77,0x77,0xFB 
        },
        Netfp_3gppAuthMode_EIA2,
        Netfp_3gppCipherMode_EEA0,
        /* Count */
        0x398A59B4,
        /* Bearer */
        0x1,
        /* Length in bytes */
		32,
        /* Input Message. */
        {
            0x98,0x1B,0xA6,0x82,0x4C,0x1B,0xFB,0x1A,0xB4,0x85,0x47,0x20,0x29,0xB7,0x1D,0x80,
		    0x8C,0xE3,0x3E,0x2C,0xC3,0xC0,0xB5,0xFC,0x1F,0x3D,0xE8,0xA6,0xDC,0x66,0xB1,0xF0
        },
        /* Ciphered Data. */
        {
            0x98,0x1B,0xA6,0x82, 0x4C,0x1B,0xFB,0x1A, 0xB4,0x85,0x47,0x20, 0x29,0xB7,0x1D,0x80,
            0x8C,0xE3,0x3E,0x2C, 0xC3,0xC0,0xB5,0xFC, 0x1F,0x3D,0xE8,0xA6, 0xDC,0x66,0xB1,0xF0,
            0xF5,0xCA,0x60,0xD3
        }
    },
    /* TEST Vector 5: 
     *  - NULL   Authentication 
     *  - SNOW3G Ciphering        */
    { 
        /* Encryption Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        /* Ciphering Key */
        {
            0x0A,0x8B,0x6B,0xD8,0xD9,0xB0,0x8B,0x08,0xD6,0x4E,0x32,0xD1,0x81,0x77,0x77,0xFB 
        },
        Netfp_3gppAuthMode_EIA0,
        Netfp_3gppCipherMode_EEA1,
        /* Count */
        0x398A59B4,
        /* Bearer */
        0x1,
        /* Length in bytes */
		32,
        /* Input Message. */
        {
            0x98,0x1B,0xA6,0x82,0x4C,0x1B,0xFB,0x1A,0xB4,0x85,0x47,0x20,0x29,0xB7,0x1D,0x80,
		    0x8C,0xE3,0x3E,0x2C,0xC3,0xC0,0xB5,0xFC,0x1F,0x3D,0xE8,0xA6,0xDC,0x66,0xB1,0xF0
        },
        /* Ciphered Data. */
        {
            0x98,0x94,0x65,0x42, 0x36,0xE2,0x56,0xE6, 0x90,0xA9,0xCE,0x8B, 0x4C,0x44,0x7B,0xD8,
            0xD6,0x8B,0x76,0x3D, 0xD8,0x0F,0x01,0xFA, 0x9A,0x56,0x84,0x7E, 0x1F,0x43,0x5C,0xF9
        }
    },

    /* TEST Vector 6: 
     *  - NULL   Authentication 
     *  - AES    Ciphering        */
    { 
        /* Encryption Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        /* Ciphering Key */
        {
            0x0A,0x8B,0x6B,0xD8,0xD9,0xB0,0x8B,0x08,0xD6,0x4E,0x32,0xD1,0x81,0x77,0x77,0xFB 
        },
        Netfp_3gppAuthMode_EIA0,
        Netfp_3gppCipherMode_EEA2,
        /* Count */
        0x398A59B4,
        /* Bearer */
        0x1,
        /* Length in bytes */
		32,
        /* Input Message. */
        {
            0x98,0x1B,0xA6,0x82,0x4C,0x1B,0xFB,0x1A,0xB4,0x85,0x47,0x20,0x29,0xB7,0x1D,0x80,
		    0x8C,0xE3,0x3E,0x2C,0xC3,0xC0,0xB5,0xFC,0x1F,0x3D,0xE8,0xA6,0xDC,0x66,0xB1,0xF0
        },
        /* Ciphered Data. */
        {
            0x98,0x7F,0xE2,0x5A, 0xC7,0xBD,0x97,0x4F, 0x9A,0x7D,0x11,0x2C, 0xF4,0x70,0xFF,0xA8,
            0xAE,0x70,0x72,0xEA, 0x96,0x16,0x27,0xC1, 0xE7,0x87,0x14,0xD2, 0x55,0x89,0xE0,0x2E
        }
    },
    /* TEST Vector 7: 
     *  - AES Authentication 
     *  - AES Ciphering        */
    { 
        /* Encryption Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        /* Ciphering Key */
        {
            0x0A,0x8B,0x6B,0xD8,0xD9,0xB0,0x8B,0x08,0xD6,0x4E,0x32,0xD1,0x81,0x77,0x77,0xFB 
        },
        Netfp_3gppAuthMode_EIA2,
        Netfp_3gppCipherMode_EEA2,
        /* Count */
        0x398A59B4,
        /* Bearer */
        0x1,
        /* Length in bytes */
		32,
        /* Input Message. */
        {
            0x98,0x1B,0xA6,0x82,0x4C,0x1B,0xFB,0x1A,0xB4,0x85,0x47,0x20,0x29,0xB7,0x1D,0x80,
		    0x8C,0xE3,0x3E,0x2C,0xC3,0xC0,0xB5,0xFC,0x1F,0x3D,0xE8,0xA6,0xDC,0x66,0xB1,0xF0
        },
        /* Ciphered Data. */
        {
            0x98,0x7F,0xE2,0x5A, 0xC7,0xBD,0x97,0x4F, 0x9A,0x7D,0x11,0x2C, 0xF4,0x70,0xFF,0xA8,
            0xAE,0x70,0x72,0xEA, 0x96,0x16,0x27,0xC1, 0xE7,0x87,0x14,0xD2, 0x55,0x89,0xE0,0x2E,
            0x9D,0x28,0x74,0xCC
        }
    }    
};

/** 
 * @brief 
 *  Uplink Test Vector
 *
 * @details
 *  The structure defines the uplink test vector which are used to verify
 *  the functionality.
 */
typedef struct ULTestVector
{
    uint8_t                 encryptionKey[16];
    uint8_t                 integrityKey[16];
    Netfp_3gppAuthMode      authMode;
    Netfp_3gppCipherMode    cipherMode;
	uint32_t                count;
	uint32_t                bearerId;
	uint32_t                length;
	uint8_t                 cipheredMessage[2060];
	uint8_t                 decodedMessage[2060];
}ULTestVector;

/** 
 * @brief Uplink Test Vectors 
 */
ULTestVector upLinkTestVectors[] =
{
    /* TEST Vector 3: 
     *  - AES    Ciphering
     *  - NULL   Authentication */
    {
        /* Encryption Key */
        {
            0x2B,0xD6,0x45,0x9F,0x82,0xC5,0xB3,0x00,0x95,0x2C,0x49,0x10,0x48,0x81,0xFF,0x48
        },
        /* Ciphering Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        Netfp_3gppAuthMode_EIA0,
        Netfp_3gppCipherMode_EEA2,
        /* Count */
        0x296F393C,
        /* Bearer */
        1,
        /* Length in bytes */
        11,
        /* Input Message */
        {
            0x33,0x32,0x34,0x62,0x63,0x39,0x38,0x61,0x37,0x34,0x79
        },
        /* Decoded Message */
        {
            0x33,0xDE,0x6A,0x90, 0x36,0xE5,0x5F,0x4A, 0x3E,0x53,0x20
        }
    },
    /* TEST Vector 1: 
     *  - NULL Ciphering
     *  - NULL Authentication */
    {
        /* Encryption Key */
        {
            0x2B,0xD6,0x45,0x9F,0x82,0xC5,0xB3,0x00,0x95,0x2C,0x49,0x10,0x48,0x81,0xFF,0x48
        },
        /* Ciphering Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        Netfp_3gppAuthMode_EIA0,
        Netfp_3gppCipherMode_EEA0,
        /* Count */
        0x296F393C,
        /* Bearer */
        1,
        /* Length in bytes */
        11,
        /* Input Message */
        {
            0x33,0x32,0x34,0x62,0x63,0x39,0x38,0x61,0x37,0x34,0x79
        },
        /* Decoded Message */
        {
            0x33,0x32,0x34,0x62, 0x63,0x39,0x38,0x61, 0x37,0x34,0x79
        }
    },
    /* TEST Vector 2: 
     *  - SNOW3G Ciphering
     *  - NULL   Authentication */
    {
        /* Encryption Key */
        {
            0x2B,0xD6,0x45,0x9F,0x82,0xC5,0xB3,0x00,0x95,0x2C,0x49,0x10,0x48,0x81,0xFF,0x48
        },
        /* Ciphering Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        Netfp_3gppAuthMode_EIA0,
        Netfp_3gppCipherMode_EEA1,
        /* Count */
        0x296F393C,
        /* Bearer */
        1,
        /* Length in bytes */
        11,
        /* Input Message */
        {
            0x33,0x32,0x34,0x62,0x63,0x39,0x38,0x61,0x37,0x34,0x79
        },
        /* Decoded Message */
        {
            0x33,0x98,0x58,0x3D, 0x6D,0x76,0xEA,0x98, 0xB7,0xF9,0x88
        }
    },
    /* TEST Vector 4: 
     *  - NULL    Ciphering
     *  - SNOW3G  Authentication */
    {
        /* Encryption Key */
        {
            0x2B,0xD6,0x45,0x9F,0x82,0xC5,0xB3,0x00,0x95,0x2C,0x49,0x10,0x48,0x81,0xFF,0x48
        },
        /* Ciphering Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        Netfp_3gppAuthMode_EIA1,
        Netfp_3gppCipherMode_EEA0,
        /* Count */
        0x296F393C,
        /* Bearer */
        1,
        /* Length in bytes */
        11,
        /* Input Message */
        {
            0x33,0x32,0x34,0x62,0x63,0x39,0x38,0xd7,0xe4,0x37,0x30
        },
        /* Decoded Message */
        {
            0x33,0x32,0x34,0x62, 0x63,0x39,0x38,0xD7, 0xE4,0x37,0x30
        }        
    },

    /*****************************************************************************************
     * The following test cases is NOT supported because we currently dont have the MAC-I
     * which we need to place at the end of the packet. 
     * 
     * Even with NULL ciphering the MAC-I at the end of the packet is NOT correct.
     *****************************************************************************************/
#if 0 
    /* TEST Vector 5: 
     *  - NULL    Ciphering
     *  - AES     Authentication */
    {
        /* Encryption Key */
        {
            0x2B,0xD6,0x45,0x9F,0x82,0xC5,0xB3,0x00,0x95,0x2C,0x49,0x10,0x48,0x81,0xFF,0x48
        },
        /* Ciphering Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        Netfp_3gppAuthMode_EIA2,
        Netfp_3gppCipherMode_EEA0,
        /* Count */
        0x296F393C,
        /* Bearer */
        1,
        /* Length in bytes */
        11,
        /* Input Message */
        {
            0x33,0x32,0x34,0x62,0x63,0x39,0x38,0x61,0x37,0x34,0x79
        },
    },
#endif

    /*****************************************************************************************
     * The following test cases are not currently supported by the tests:
     *  1. SNOW3G Ciphering & SNOW3G Authentication 
     *  2. AES Ciphering & AES Authentication 
     *
     * This is because the MAC-I key is a part of the ciphered message. This will always fail
     * the decoding test.
     *****************************************************************************************/
#if 0
    /* TEST Vector 2: 
     *  - SNOW3G Ciphering
     *  - SNOW3G Authentication */
    {
        /* Encryption Key */
        {
            0x2B,0xD6,0x45,0x9F,0x82,0xC5,0xB3,0x00,0x95,0x2C,0x49,0x10,0x48,0x81,0xFF,0x48
        },
        /* Ciphering Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        Netfp_3gppAuthMode_EIA1,
        Netfp_3gppCipherMode_EEA1,
        /* Count */
        0x296F393C,
        /* Bearer */
        1,
        /* Length in bytes */
        11,
        /* Input Message */
        {
            0x33,0x32,0x34,0x62,0x63,0x39,0x38,0x61,0x37,0x34,0x79
        },
    },

    /* TEST Vector 3: 
     *  - AES Ciphering
     *  - AES Authentication */
    {
        /* Encryption Key */
        {
            0x2B,0xD6,0x45,0x9F,0x82,0xC5,0xB3,0x00,0x95,0x2C,0x49,0x10,0x48,0x81,0xFF,0x48
        },
        /* Ciphering Key */
        {
            0xD3,0xC5,0xD5,0x92,0x32,0x7F,0xB1,0x1C,0x40,0x35,0xC6,0x68,0x0A,0xF8,0xC6,0xD1
        },
        Netfp_3gppAuthMode_EIA2,
        Netfp_3gppCipherMode_EEA2,
        /* Count */
        0x296F393C,
        /* Bearer */
        1,
        /* Length in bytes */
        11,
        /* Input Message */
        {
            0x33,0x32,0x34,0x62,0x63,0x39,0x38,0x61,0x37,0x34,0x79
        },
    },
#endif    
};

#endif /* __TEST_VECTORS_H__ */ 

