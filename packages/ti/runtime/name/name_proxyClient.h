/**
 *   @file  name_proxyClient.h
 *
 *   @brief
 *      Header file for the Name module which exposes the NAME Proxy/Client services
 *
 *  \par
 *  NOTE:
 *      (C) Copyright 2014 Texas Instruments, Inc.
 *  \par
 */

#ifndef __NAME_PROXY_CLIENT_H__
#define __NAME_PROXY_CLIENT_H__

/* SYSLIB Include Files. */
#include <ti/runtime/common/syslib.h>
#include <ti/runtime/name/name.h>
#include <ti/runtime/name/name_db.h>
#include <ti/runtime/pktlib/pktlib.h>
#include <ti/runtime/msgcom/msgcom.h>

#ifdef __cplusplus
extern "C" {
#endif

/** @addtogroup NAME_NAMEASTRUCT
 @{ */

/**
 * @brief   Handle to the name proxy
 */
typedef void*   Name_ProxyHandle;

/**
 * @brief   Handle to the name client
 */
typedef void*   Name_ClientHandle;

/**
 * @brief
 *  Logging Levels
 *
 * @details
 *  Log Levels of messages which are generated by the name server
 */
typedef enum Name_LogLevel
{
    /**
     * @brief   Debug message
     */
    Name_LogLevel_DEBUG = 0x1,

    /**
     * @brief   Informational message
     */
    Name_LogLevel_INFO = 0x2,

    /**
     * @brief   Error message
     */
    Name_LogLevel_ERROR = 0x3
}Name_LogLevel;

/**
 *  @b Description
 *  @n
 *      Name Server Logging function which is passed to the server during
 *      initialization. The function is used to pass messages from the server to
 *      the application during execution.
 *
 *  @param[in]  logLevel
 *      Log level of the message
 *  @param[in]  fmt
 *      Formatted string
 *  @param[in]  arg
 *      Variable length of arguments.
 *
 *  @retval
 *      Not applicable
 */
typedef void (*Name_ProxyLogFn)(Name_LogLevel logLevel, const char* fmt, va_list arg) __attribute__ ((format (printf, 2, 0)));

/**
 * @brief
 *  Name DSP Proxy configuration
 *
 * @details
 *  In the DSP realm; proxy communicate with the clients using MSGCOM channels
 *  The structure defines DSP realm specific configuration.
 */
typedef struct Name_DSPProxyRealmCfg
{
    /**
     * @brief   Heap handle which is used to allocate messages which are exchanged
     * between the name client and proxy. The heap handle should be a shared heap if
     * the client and server execute on different DSP cores.
     */
    Pktlib_HeapHandle       clientProxyHeapHandle;

    /**
     * @brief   This is the MSGCOM instance handle which is used to create and manage all
     * the MSGCOM channels used between the DSP Agent Server & Agent client(s). Please
     * ensure that on the DSP the agent server and clients are attached to the same MSGCOM
     * instance else the agent communication between the server & clients will not work.
     */
    Msgcom_InstHandle       msgcomInstHandle;
}Name_DSPProxyRealmCfg;

/**
 * @brief
 *  Name ARM Proxy configuration
 *
 * @details
 *  The structure describes the ARM Server realm configuration.
 */
typedef struct Name_ARMProxyRealmCfg
{
    /**
     * @brief   Nothing required.
     */
    uint32_t        dummy;
}Name_ARMProxyRealmCfg;

/**
 * @brief
 *  Name Proxy configuration
 *
 * @details
 *  The Name proxy configuration allows the exchange of names between different
 *  execution realms. The structure specifies the configuration structure which
 *  is used to create a proxy instance.
 */
typedef struct Name_ProxyCfg
{
    /**
     * @brief  Name of the proxy: This name should be unique in the system
     */
    char                    proxyName[NAME_MAX_CHAR + 1];

    /**
     * @brief   Proxy execution realm
     */
    Name_ExecutionRealm     realm;

    /**
     * @brief   Shared memory address: This is used for initial communication and
     * synchronization between the servers before the transport services can be used
     * The address here should not have a conflict with other services. Each name
     * service requires 4K of shared memory space.
     */
    uint32_t                sharedMemoryAddress;

    /**
     * @brief   Proxies will operate and store information in the specific database.
     * It is responsibility of the application to ensure that this  identifier is the same
     * across the Name proxies (DSP + ARM) and any name clients which is connected to
     * this. Failure to do so will result in the agent named resource functionality to
     * not work correctly.
     */
    Name_DBHandle           databaseHandle;

    /**
     * @brief   Local flow identifier: This is the flow identifer which is used
     * to receive messages from the peer agent server.
     */
    uint32_t                localFlowId;

    /**
     * @brief   Remote flow identifier: This is the flow identifier which is used
     * to send messages to the peer agent server.
     */
    uint32_t                remoteFlowId;

    /**
     * @brief   PKTLIB Instance handle
     */
    Pktlib_InstHandle       pktlibInstHandle;

    /**
     * @brief   Proxy heap handle which is used to receive & send messages to the remote
     * name proxy
     */
    Pktlib_HeapHandle       proxyHeapHandle;

    /**
     * @brief   Logging function. If this is configured as NULL no logging is provided
     * else log messages are passed to the application via this function.
     */
    Name_ProxyLogFn         logFxn;

    /**
     * @brief   Realm specific configuration
     */
    union
    {
        /**
         * @brief   DSP specific realm configuration
         */
        Name_DSPProxyRealmCfg         dspCfg;

        /**
         * @brief   ARM specific realm configuration
         */
        Name_ARMProxyRealmCfg         armCfg;
    }u;

    /**
     * @brief  OSAL Malloc
     */
    Osal_NameMalloc                 malloc;

    /**
     * @brief  OSAL Free
     */
    Osal_NameFree                   free;

    /**
     * @brief  OSAL cache invalidation
     */
    Osal_NameBeginMemoryAccess      beginMemAccess;

    /**
     * @brief  OSAL cache writeback
     */
    Osal_NameEndMemoryAccess        endMemAccess;
}Name_ProxyCfg;

/**
 * @brief
 *  Name DSP Client configuration
 *
 * @details
 *  In the DSP realm name proxy communicate with the clients using MSGCOM channels
 *  The structure defines DSP Name client realm specific configuration.
 */
typedef struct Name_DSPClientRealmCfg
{
    /**
     * @brief   PKTLIB Instance handle
     */
    Pktlib_InstHandle       pktlibInstHandle;

    /**
     * @brief   This is the MSGCOM instance handle which is used to create and manage all
     * the MSGCOM channels used between the Name Proxy & Name client(s). Please
     * ensure that on the DSP the Name Proxy and Clients are attached to the same name
     * database handle else the proxy and clients will never be able to find each others
     * MSGCOM channels and the startup will fail.
     */
    Msgcom_InstHandle       msgcomInstHandle;

    /**
     * @brief   Client heap handle which is used by the name client to send messages
     * to the name proxy. If the name proxy and name clients are located on different
     * cores this heap needs to be a SHARED PKTLIB HEAP.
     *
     * NOTE: Failure to do so will result in memory leaks.
     */
    Pktlib_HeapHandle       clientHeapHandle;
}Name_DSPClientRealmCfg;

/**
 * @brief
 *  Name ARM Client configuration
 *
 * @details
 *  The structure describes the ARM Client realm configuration.
 */
typedef struct Name_ARMClientRealmCfg
{
    /**
     * @brief   Nothing required.
     */
    uint32_t        dummy;
}Name_ARMClientRealmCfg;

/**
 * @brief
 *  Name Client configuration
 *
 * @details
 *  The structure describes the name client configuration which allows
 *  a name client to be created and registered with the name server.
 */
typedef struct Name_ClientCfg
{
    /**
     * @brief  Name of the client
     */
    char                            clientName[NAME_MAX_CHAR + 1];

    /**
     * @brief  Name of the proxy to which the client will be connected
     */
    char                            proxyName[NAME_MAX_CHAR + 1];

    /**
     * @brief   Clients will operate and store information in the specific database.
     * It is responsibility of the application to ensure that this identifier is the same
     * across the Name proxies (DSP + ARM) and any name clients which is connected to
     * this. Failure to do so will result in the agent named resource functionality to
     * not work correctly.
     */
    Name_DBHandle                   databaseHandle;

    /**
     * @brief  Execution realm in which the name client is executing.
     */
    Name_ExecutionRealm             realm;

    /**
     * @brief   Realm specific configuration
     */
    union
    {
        /**
         * @brief   DSP specific realm configuration
         */
        Name_DSPClientRealmCfg          dspCfg;

        /**
         * @brief   ARM specific realm configuration
         */
        Name_ARMClientRealmCfg         armCfg;
    }u;

    /**
     * @brief  OSAL Malloc
     */
    Osal_NameMalloc                 malloc;

    /**
     * @brief  OSAL Free
     */
    Osal_NameFree                   free;

    /**
     * @brief  OSAL cache invalidation
     */
    Osal_NameBeginMemoryAccess      beginMemAccess;

    /**
     * @brief  OSAL cache writeback
     */
    Osal_NameEndMemoryAccess        endMemAccess;

    /**
     * @brief  OSAL create semaphore
     */
    Osal_NameCreateSem              createSem;

    /**
     * @brief  OSAL delete semaphore
     */
    Osal_NameDeleteSem              deleteSem;

    /**
     * @brief  OSAL post semaphore
     */
    Osal_NamePostSem                postSem;

    /**
     * @brief  OSAL pend semaphore
     */
    Osal_NamePendSem                pendSem;

    /**
     * @brief  OSAL Enter critical section
     */
    Osal_NameEnterCS                enterCS;

    /**
     * @brief  OSAL Exit critical section
     */
    Osal_NameExitCS                 exitCS;
}Name_ClientCfg;

/*****************************************************************************
 ***************************** Exported API **********************************
 *****************************************************************************/

/* Name Client Functions: */
extern Name_ClientHandle Name_initClient (Name_ClientCfg* ptrNameClientCfg, int32_t* errCode);
extern int32_t Name_deleteClient (Name_ClientHandle clientHandle, int32_t* errCode);
extern void    Name_executeClient(Name_ClientHandle clientHandle);

/* Name Proxy Functions: */
extern Name_ProxyHandle Name_initProxy (Name_ProxyCfg* ptrNameProxyCfg, int32_t* errCode);
extern int32_t Name_deleteProxy (Name_ProxyHandle proxyHandle, int32_t* errCode);
extern int32_t Name_executeProxy (Name_ProxyHandle proxyHandle, int32_t* errCode);
extern int32_t Name_isProxySynched (Name_ProxyHandle proxyHandle, int32_t* errCode);

/* Name Client Services: */
extern int32_t Name_push(Name_ClientHandle clientHandle, const char* name, Name_ResourceBucket bucket,
                         Name_ResourceOperationType operation, int32_t* errCode);
extern int32_t Name_get(Name_ClientHandle clientHandle, uint32_t remoteDatabaseId, Name_ResourceBucket bucket, const char* ptrName,
                        Name_ResourceCfg* ptrResourceCfg, int32_t* errCode);

/**
@}
*/

#ifdef __cplusplus
}
#endif

#endif /* __NAME_PROXY_CLIENT_H__ */

