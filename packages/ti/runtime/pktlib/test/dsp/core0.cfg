/*
 *  Copyright 2011 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */

environment['xdc.cfg.check.fatal'] = 'false';
var armdownload = "" + java.lang.System.getenv("ARM_DSP_DOWNLOAD");

Program.platformName="Kepler"

/********************************************************************
 ************************** BIOS Modules ****************************
 ********************************************************************/
var Memory    = xdc.useModule('xdc.runtime.Memory');
var BIOS      = xdc.useModule('ti.sysbios.BIOS');
var HWI       = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var CPINTC    = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var ECM       = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf   = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Idle      = xdc.useModule('ti.sysbios.knl.Idle');
var SEM       = xdc.useModule('ti.sysbios.knl.Semaphore');
var Event     = xdc.useModule('ti.sysbios.knl.Event');
var Timer     = xdc.useModule('ti.sysbios.hal.Timer');
var Cache     = xdc.useModule('ti.sysbios.family.c66.Cache');
var LogStream = xdc.useModule('ti.uia.sysbios.LoggerStreamer2');
var Log       = xdc.useModule('xdc.runtime.Log');
var Diags     = xdc.useModule('xdc.runtime.Diags');
var System    = xdc.useModule('xdc.runtime.System');
if (armdownload==1)
{
  print ("BUILD ARM DOWNLOAD");
    
  var Resource = xdc.useModule('ti.ipc.remoteproc.Resource');
  Resource.loadSegment = Program.platform.dataMemory;
  Resource.traceOnly = true;
  
  

  Program.global.sysMinBufSize = 0x80000;
  
  var SysMin = xdc.useModule('xdc.runtime.SysMin');
  System.SupportProxy = SysMin;
  SysMin.bufSize = Program.global.sysMinBufSize;  
  SysMin.sectionName = ".mySysminBuf"
  SysMin.flushAtExit=0;
  
	
  /* BIOS Resource Table: */
  Program.sectMap[".resource_table"] = new Program.SectionSpec();
  Program.sectMap[".resource_table"].type = "NOINIT";
  
} 
else
{
  print ("BUILD CCS DOWNLOAD");
  var SysStd  = xdc.useModule('xdc.runtime.SysStd');
  System.SupportProxy = SysStd;
}

/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
ECM.eventGroupHwiNum[0] = 7;
ECM.eventGroupHwiNum[1] = 8;
ECM.eventGroupHwiNum[2] = 9;
ECM.eventGroupHwiNum[3] = 10;

/* Default Heap Creation: Local L2 memory */
var heapMemParams           = new HeapMem.Params();
heapMemParams.size          = 65536*2;
heapMemParams.sectionName   = "systemHeap";
Program.global.heap0        = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance  = Program.global.heap0;

/* DDR3 Private Heap */
var heapMemParams           	= new HeapMem.Params();
heapMemParams.size          	= 1024*1024;
heapMemParams.sectionName   	= "ddr3PrivateHeap";
Program.global.ddr3PrivateHeap  = HeapMem.create(heapMemParams);

/* Place the sections appropriately. */
Program.sectMap["sharedL2"]                 = "L2SRAM";
Program.sectMap["systemHeap"]               = "L2SRAM";
Program.sectMap[".sysmem"]                  = "L2SRAM";
Program.sectMap[".args"]                    = "L2SRAM";
Program.sectMap[".cio"]                     = "L2SRAM";
Program.sectMap[".far"]                     = "L2SRAM";
Program.sectMap[".rodata"]                  = "L2SRAM";
Program.sectMap[".neardata"]                = "L2SRAM";
Program.sectMap[".init_array"]              = "L2SRAM";
Program.sectMap[".bss"]                     = "L2SRAM";
Program.sectMap[".code"]                    = "L2SRAM";
Program.sectMap[".data"]                    = "L2SRAM";
Program.sectMap[".fardata"]                 = "L2SRAM";
Program.sectMap[".args"]                    = "L2SRAM";
Program.sectMap[".cio"]                     = "L2SRAM";
Program.sectMap[".plt"]                     = "L2SRAM";
Program.sectMap[".vecs"]                    = "L2SRAM";
Program.sectMap["platform_lib"]             = "L2SRAM";
Program.sectMap[".far:taskStackSection"]    = "L2SRAM";
Program.sectMap[".stack"]                   = "L2SRAM";
Program.sectMap["ddr3PrivateHeap"]          = "LTE1_DDR3_L2DP";
Program.sectMap[".mySysminBuf"]             = "LTE1_DDR3_L1MASTER";
Program.sectMap[".resource_table"]          = "LTE1_DDR3_L1MASTER";

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			=   true;

/********************************************************************
 ************************ Custom Memory Map *************************
 ********************************************************************/

/* Create global definitions for the well known shared memory address information
 * These definitions will now be available in C */
Program.global.DDR3_SYSLIB_ROOT_RSVD_MEM    = Program.cpu.memoryMap["DDR3_SYSLIB_ROOT_RSVD_MEM"].base;
Program.global.LTE1_DDR3_NAME_PROXY_RSVD    = Program.cpu.memoryMap["LTE1_DDR3_NAME_PROXY_RSVD"].base;
Program.global.DDR3_SYSLIB_RESMGR_RSVD      = Program.cpu.memoryMap["DDR3_SYSLIB_RESMGR_RSVD"].base;
Program.global.DDR3_SYSLIB_RESMGR_RSVD_LEN  = Program.cpu.memoryMap["DDR3_SYSLIB_RESMGR_RSVD"].len;
Program.global.LTE1_DDR3_NAMED_RESOURCE     = Program.cpu.memoryMap["LTE1_DDR3_NAMED_RESOURCE"].base;
Program.global.LTE1_DDR3_NAMED_RESOURCE_LEN = Program.cpu.memoryMap["LTE1_DDR3_NAMED_RESOURCE"].len;

/********************************************************************
 *************************** IPC Modules ****************************
 ********************************************************************/
var Ipc          = xdc.useModule('ti.sdo.ipc.Ipc');
var Settings     = xdc.module('ti.sdo.ipc.family.Settings');
var ListMP       = xdc.useModule('ti.sdo.ipc.ListMP');
var GateMP       = xdc.useModule('ti.sdo.ipc.GateMP');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
var HeapMemMP    = xdc.useModule('ti.sdo.ipc.heaps.HeapMemMP');
var MultiProc    = xdc.useModule('ti.sdo.utils.MultiProc');
SharedRegion.translate = false;

/* Setup the list of processors that will use the IPC Shared Heaps */
MultiProc.setConfig(null, ["CORE0", "CORE1" ]);

/* Synchronize all processors (this will be done in Ipc_start) */
Ipc.procSync = Ipc.ProcSync_ALL;

/* To avoid wasting shared memory for Notify and MessageQ transports */
for (var i = 0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
        setupNotify: false,
        setupMessageQ: false,
    });
}

/* Shared MSMC Memory Heaps: This is used across multiple cores.  */
SharedRegion.setEntryMeta(0,
    { base: Program.cpu.memoryMap["LTE1_MSMC_SHARED_HEAP"].base,
      len:  Program.cpu.memoryMap["LTE1_MSMC_SHARED_HEAP"].len,
      ownerProcId: 0,
      isValid: true,
      name: "MSMCMem",
    });

/* Shared DDR3 Memory Heaps:  */
SharedRegion.setEntryMeta(1,
    { base: Program.cpu.memoryMap["LTE1_DDR3_SHARED_HEAP"].base,
      len:  Program.cpu.memoryMap["LTE1_DDR3_SHARED_HEAP"].len,
      ownerProcId: 0,
      isValid: true,
      name: "DDR3Mem",
    });

/********************************************************************
 *************************** PDK Modules ****************************
 ********************************************************************/
var Csl  = xdc.useModule ('ti.csl.Settings');
var Cppi = xdc.useModule('ti.drv.cppi.Settings');
var Qmss = xdc.useModule('ti.drv.qmss.Settings');
var RM   = xdc.loadPackage('ti.drv.rm');

/********************************************************************
 ************************** SYSLIB Modules **************************
 ********************************************************************/
var Pktlib = xdc.useModule('ti.runtime.pktlib.Settings');
var ResMgr = xdc.useModule('ti.runtime.resmgr.Settings');
var Name   = xdc.useModule('ti.runtime.name.Settings');

/********************************************************************
 ************************* Device Selection ***********************
 ********************************************************************/
var syslibDevice = environment["SYSLIB_DEVICE"] + '';

/*********************************************************************************
 * Validate the device name
 *********************************************************************************/
if ((syslibDevice != "k2h") && (syslibDevice != "k2k") && (syslibDevice != "k2l"))
{
    print ("***********************************************************");
    print ("Error: Unsupported Device " + syslibDevice);
    print ("***********************************************************");
}

/* Select the correct device specific libraries */
Csl.deviceType      = syslibDevice;
Cppi.deviceType     = syslibDevice;
Qmss.deviceType     = syslibDevice;
Name.deviceType     = syslibDevice;
Pktlib.deviceType   = syslibDevice;
ResMgr.deviceType   = syslibDevice;

