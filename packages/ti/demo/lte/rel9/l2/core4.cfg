/*
 *  Copyright 2013 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */

environment['xdc.cfg.check.fatal'] = 'false';

/********************************************************************
 ************************** BIOS Modules ****************************
 ********************************************************************/
var Memory          = xdc.useModule('xdc.runtime.Memory');
var BIOS            = xdc.useModule('ti.sysbios.BIOS');
var HWI             = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var CPINTC          = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var ECM             = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var HeapMem         = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf         = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Event           = xdc.useModule('ti.sysbios.knl.Event');
var Task            = xdc.useModule('ti.sysbios.knl.Task');
var Idle            = xdc.useModule('ti.sysbios.knl.Idle');
var SEM             = xdc.useModule('ti.sysbios.knl.Semaphore');
var Log             = xdc.useModule('xdc.runtime.Log');
var Diags           = xdc.useModule('xdc.runtime.Diags');
var System          = xdc.useModule('xdc.runtime.System');
var SysStd          = xdc.useModule('xdc.runtime.SysStd');
var Cache           = xdc.useModule('ti.sysbios.family.c66.Cache');
var LoggerStreamer  = xdc.useModule('ti.uia.sysbios.LoggerStreamer2');
System.SupportProxy = SysStd;

/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
ECM.eventGroupHwiNum[0] = 7;
ECM.eventGroupHwiNum[1] = 8;
ECM.eventGroupHwiNum[2] = 9;
ECM.eventGroupHwiNum[3] = 10;

/* Default Local memory Heap: */
var heapMemParams           = new HeapMem.Params();
heapMemParams.size          = 256*1024;
heapMemParams.sectionName   = "systemHeap";
Program.global.heap0        = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance  = Program.global.heap0;

/* L2DP DDR3 Heap */
var heapMemParams           	= new HeapMem.Params();
heapMemParams.size          	= 1024*1024;
heapMemParams.sectionName   	= "ddr3PrivateHeap";
Program.global.ddr3PrivateHeap  = HeapMem.create(heapMemParams);

/* Place the sections appropriately. */
Program.sectMap["sharedL2"]                 = "L2SRAM";
Program.sectMap["systemHeap"]               = "L2SRAM";
Program.sectMap[".sysmem"]                  = "L2SRAM";
Program.sectMap[".args"]                    = "L2SRAM";
Program.sectMap[".cio"]                     = "L2SRAM";
Program.sectMap[".far"] 	                = "L2SRAM";
Program.sectMap[".rodata"] 	                = "L2SRAM";
Program.sectMap[".neardata"] 	            = "L2SRAM";
Program.sectMap[".init_array"] 	            = "L2SRAM";
Program.sectMap[".bss"]		                = "L2SRAM";
Program.sectMap[".code"]	                = "L2SRAM";
Program.sectMap[".data"]	                = "L2SRAM";
Program.sectMap[".fardata"] 	            = "L2SRAM";
Program.sectMap[".args"] 	                = "L2SRAM";
Program.sectMap[".cio"] 	                = "L2SRAM";
Program.sectMap[".plt"] 	                = "L2SRAM";
Program.sectMap[".vecs"] 	                = "L2SRAM";
Program.sectMap["platform_lib"] 	        = "L2SRAM";
Program.sectMap[".far:taskStackSection"]    = "L2SRAM";
Program.sectMap[".stack"]	                = "L2SRAM";
Program.sectMap["ddr3PrivateHeap"]	        = "LTE2_DDR3_L2DP";

/* Enable BIOS to delete and cleanup the terminated tasks and free stacks */
Task.deleteTerminatedTasks = true;

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			=   true;

/********************************************************************
 ************************ Custom Memory Map *************************
 ********************************************************************/

/* Create global definitions for the well known shared memory address information
 * These definitions will now be available in C */
Program.global.DDR3_SYSLIB_ROOT_RSVD_MEM    = Program.cpu.memoryMap["DDR3_SYSLIB_ROOT_RSVD_MEM"].base;
Program.global.LTE2_DDR3_NAME_PROXY_RSVD    = Program.cpu.memoryMap["LTE2_DDR3_NAME_PROXY_RSVD"].base;
Program.global.DDR3_SYSLIB_RESMGR_RSVD      = Program.cpu.memoryMap["DDR3_SYSLIB_RESMGR_RSVD"].base;
Program.global.DDR3_SYSLIB_RESMGR_RSVD_LEN  = Program.cpu.memoryMap["DDR3_SYSLIB_RESMGR_RSVD"].len;
Program.global.LTE2_DDR3_NAMED_RESOURCE     = Program.cpu.memoryMap["LTE2_DDR3_NAMED_RESOURCE"].base;
Program.global.LTE2_DDR3_NAMED_RESOURCE_LEN = Program.cpu.memoryMap["LTE2_DDR3_NAMED_RESOURCE"].len;

/********************************************************************
 *************************** IPC Modules ****************************
 ********************************************************************/
var Ipc          = xdc.useModule('ti.sdo.ipc.Ipc');
var Settings     = xdc.module('ti.sdo.ipc.family.Settings');
var ListMP       = xdc.useModule('ti.sdo.ipc.ListMP');
var GateMP       = xdc.useModule('ti.sdo.ipc.GateMP');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
var HeapMemMP    = xdc.useModule('ti.sdo.ipc.heaps.HeapMemMP');
var MultiProc    = xdc.useModule('ti.sdo.utils.MultiProc');
SharedRegion.translate = false;

MultiProc.setConfig(null, ["CORE4", "CORE5", "CORE6", "CORE7" ]);

/* Synchronize all processors (this will be done in Ipc_start) */
Ipc.procSync = Ipc.ProcSync_ALL;

/* To avoid wasting shared memory for Notify and MessageQ transports */
for (var i = 0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
        setupNotify: false,
        setupMessageQ: false,
    });
}

/* Shared MSMC Memory Heaps: This is used across multiple cores. Please use
 * shared heaps sparingly. */
SharedRegion.setEntryMeta(0,
    { base: Program.cpu.memoryMap["LTE2_MSMC_SHARED_HEAP"].base,
      len:  Program.cpu.memoryMap["LTE2_MSMC_SHARED_HEAP"].len,
      ownerProcId: 0,
      isValid: true,
      name: "MSMCMem",
    });

/* Shared DDR3 Memory Heaps: This is used across multiple cores. Please use
 * shared heaps sparingly. */
SharedRegion.setEntryMeta(1,
    { base: Program.cpu.memoryMap["LTE2_DDR3_SHARED_HEAP"].base,
      len:  Program.cpu.memoryMap["LTE2_DDR3_SHARED_HEAP"].len,
      ownerProcId: 0,
      isValid: true,
      name: "DDR3Mem",
    });

/********************************************************************
 *************************** PDK Modules ****************************
 ********************************************************************/
var Csl  = xdc.useModule ('ti.csl.Settings');
var Cppi = xdc.useModule('ti.drv.cppi.Settings');
var Qmss = xdc.useModule('ti.drv.qmss.Settings');
var RM   = xdc.loadPackage('ti.drv.rm');
var Pa   = xdc.useModule('ti.drv.pa.Settings');

/********************************************************************
 ************************** Security Modules ************************
 ********************************************************************/
var Sa     = xdc.loadPackage('ti.drv.sa');
var Snow3g = xdc.loadPackage('ti.snow3g');
var Sa3gpp = xdc.loadPackage('ti.drv.sa.sa3gppEnabler');

/********************************************************************
 ************************** SYSLIB Modules **************************
 ********************************************************************/
var Pktlib = xdc.useModule('ti.runtime.pktlib.Settings');
var ResMgr = xdc.useModule('ti.runtime.resmgr.Settings');
var Josh   = xdc.useModule('ti.runtime.josh.Settings');
var Name   = xdc.useModule('ti.runtime.name.Settings');
var Msgcom = xdc.useModule('ti.runtime.msgcom.Settings');
var Dat    = xdc.useModule('ti.runtime.dat.Settings');
var Root   = xdc.useModule('ti.runtime.root.Settings');
var Domain = xdc.useModule('ti.runtime.domain.Settings');
var Netfp  = xdc.useModule('ti.runtime.netfp.Settings');
var Memlog = xdc.useModule('ti.runtime.memlog.Settings');

/********************************************************************
 ************************* Device Selection ***********************
 ********************************************************************/
var syslibDevice = environment["SYSLIB_DEVICE"] + '';

/*********************************************************************************
 * Validate the device name
 *********************************************************************************/
if ((syslibDevice != "k2h") && (syslibDevice != "k2k") && (syslibDevice != "k2l"))
{
    print ("***********************************************************");
    print ("Error: Unsupported Device " + syslibDevice);
    print ("***********************************************************");
}

/* Select the correct device specific libraries */
Csl.deviceType      = syslibDevice;
Pa.deviceType       = syslibDevice;
Cppi.deviceType     = syslibDevice;
Qmss.deviceType     = syslibDevice;
Pa.deviceType       = syslibDevice;
Josh.deviceType     = syslibDevice;
Name.deviceType     = syslibDevice;
Pktlib.deviceType   = syslibDevice;
ResMgr.deviceType   = syslibDevice;
Msgcom.deviceType   = syslibDevice;
Root.deviceType     = syslibDevice;
Domain.deviceType   = syslibDevice;
Dat.deviceType      = syslibDevice;
Netfp.deviceType    = syslibDevice;
Memlog.deviceType   = syslibDevice;

/********************************************************************
 **************************** UIA Modules ***************************
 ********************************************************************/
var UIAErr                  = xdc.useModule('ti.uia.events.UIAErr');
var UIAEvt                  = xdc.useModule('ti.uia.events.UIAEvt');
var UIABenchmark            = xdc.useModule('ti.uia.events.UIABenchmark');

/* Logger Streamer2 is hooked up with the DAT module */
var LoggerStreamer2                = xdc.useModule('ti.uia.sysbios.LoggerStreamer2');
LoggerStreamer2.testForNullWrPtr   = true;
LoggerStreamer2.isTimestampEnabled = true;

/* Initialize Logger 0
 * - The buffer size should be match the Heap which is passed to the DAT Producer */
var loggerParams                     = new LoggerStreamer2.Params();
loggerParams.exchangeFxn             = '&Dat_exchangeFunction';
loggerParams.bufSize                 = 1408;
Program.global.logger0               = LoggerStreamer2.create(loggerParams);
Program.global.logger0.instance.name = "Logger0";
Program.global.syncLogger            = Program.global.logger0;

/* Load LogSync module. */
var LogSync                 = xdc.useModule('ti.uia.runtime.LogSync');
LogSync.syncLogger          = Program.global.syncLogger;

/* Load the LogSnapshot module used for general purpose producers. */
var LogSnapshot            = xdc.useModule('ti.uia.runtime.LogSnapshot');
LogSnapshot.common$.logger = Program.global.logger0;

/* Set default logger */
var Defaults               = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger    = Program.global.logger0;

/* Sysbios logging setup */
var LoggingSetup             = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.loggerType      = LoggingSetup.LoggerType_STREAMER2;
LoggingSetup.loadLogger      = Program.global.logger0;
LoggingSetup.mainLogger      = Program.global.logger0;
LoggingSetup.sysbiosLogger   = Program.global.logger0;
LoggingSetup.multicoreEventCorrelation = false;

/* Sysbios task logging */
LoggingSetup.sysbiosTaskLoggingRuntimeControl = true;
LoggingSetup.sysbiosTaskLogging = false;

/* Sysbios load logging */
LoggingSetup.loadLoggingRuntimeControl = true;
LoggingSetup.loadLogging = false;

/* Sysbios Hwi logging */
LoggingSetup.sysbiosHwiLoggingRuntimeControl = true;
LoggingSetup.sysbiosHwiLogging = false;

/* Sysbios Swi logging */
LoggingSetup.sysbiosSwiLoggingRuntimeControl = true;
LoggingSetup.sysbiosSwiLogging = false;

